.container {
  background-color: #eee;
}
.container-2 {
  background-color: #eee;
  max-width: 1000px; /*最大幅を固定*/
  margin-left: auto;
  margin-right: auto;
}
.container-3 {
  background-color: #eee;
  max-width: 1000px; /*最大幅を固定*/
  margin-left: auto;
  margin-right: auto;
}

img {
  max-width: 100%; /*画像自体の物理的な幅まで広がる*/
  /* width: 100%;  */ /*画像自体の物理的な幅を超えて、親要素の幅いっぱいまで広がる*/
  height: auto;
}

.row {
  display: flex;
}
.col2 {
  width: 50%;
  border: 1px dashed #999;
}

.row2 {
  display: flex;
  justify-content: space-between;
  max-width: 640px;
  margin: 0 auto;
  outline: 1px dashed #999;
}

.col2-2 {
  /* 子要素のサイズ　/ 親要素のcontent-boxのサイズ * 100% */
  width: calc((300 / 640) * 100%);
  background: #e7e7e7;
}

.row3 {
  display: flex;
  justify-content: space-between;
  max-width: 640px;
  margin: 0 auto;
  padding: 20px;
  display: flex;
}

.col2 {
  width: 50%;
  border: 1px dashed #999;
}

.row2 {
  display: flex;
  justify-content: space-between;
  max-width: 640px;
  margin: 0 auto;
  outline: 1px dashed #999;
}

.col2-2 {
  /* 子要素のサイズ　/ 親要素のcontent-boxのサイズ * 100% */
  width: calc((300 / 640) * 100%);
  background: #e7e7e7;
}

.row3 {
  display: flex;
  justify-content: space-between;
  max-width: 640px;
  margin: 0 auto;
  padding: 20px;
  outline: 1px dashed #999;
}

.col2-2 {
  /* 親640 padding 左右20 段落の間20 640-60 / 2 = 290  */
  width: calc((290 / 600) * 100%);
}

/* モバイルファースト */
/* 全てのデバイス向け　SP用のスタイル */
/* +は隣接兄弟セレクタ　モバイルファースト2とモバイルファースト3に適用される */
/* 前の要素と直後の要素が同じ親要素内で兄弟関係にあり、すぐに隣接している場合にマッチ */
.cardList__item + .cardList__item {
  margin-top: 30px;
}

/* PC用のスタイル　画面幅が768px以上の時に適用 */
/* printは印刷用。ないとモバイル用のレイアウトで出力される */
/* モバイルファーストの場合、ブレイクポイントを複数持たせる場合は値が小さい方から順に上書きされるように記述する。この記述の下に768px以上の記述を書く */
@media screen and (min-width: 768px), print {
  .cardList {
    display: flex;
    justify-content: space-between;
  }

  .cardList__item {
    width: calc((100%) / 3);
  }

  .cardList__item + .cardList__item {
    margin-top: 0;
  }
}

.case{
  max-width: 1000px;
  margin: 50px auto;
  padding: 30px;
  border: 1px solid #e7e7e7;
}
.case-item{
  margin: 30px 0;
}
.case-item * + * {
  margin-top: 15px;
}
.fz12{
  font-size: 12px;
}
.fz16{
  font-size: 16px;
}
/* 親要素に指定または、継承されている文字サイズを基準 */
/* 1em=12pxにも1em=16pxにもなりうる */
.indent-1{
  text-indent: 1em;
}

/* afterやbeforeがものすごく便利なのは「HTMLコードを汚すことなく様々な表現ができる」 */
/* beforeとafterの違い　<a>{before擬似要素}hoge{after擬似要素}</a> */
.arw::before{
  /* befreo、afterで描画するときのお決まり */
  content: "";
  /* ブロック→縦並び、横に広がる、高さと幅が指定可能 */
  /* インライン→横並び、文字の大きさや長さによって変化 */
  /* インラインブロック→横並び、高さや幅が自由に指定可能 */
  /* ダブルクォーテーション不要 */
  display: inline-block;
  width: 0.5em;
  height: 0.5em;
  margin-right: 0.5em;
  border-top: 2px solid;
  border-right: 2px solid;
  transform: rotate(45deg);
}

/*行送り：
行送りには例外的に単位なしの倍数を指定しますが、この場合は「em」として計算される仕様となっています。*/
.article {
  line-height: 2;
}

.rem-text{
  font-size: 1rem;
}
.px-text{
  font-size: 16px;
}

.rem-list li{
font-size: 1.125rem;
}

.em-list li{
  font-size: 1.125em;
}

.vw-box {
  width: 50vh;
  height: 50vh;
  background-color: #ccc;
}

/*vwで文字サイズ指定：
vwはビューポート幅に連動するので、文字サイズも画像のようになめらかに伸縮させることが可能です。折返しを発生させたくないタイポグラフィをテキストで実装する際に特に重宝します。*/
.vw-text{
  font-size: 5vw;
}

.min-text{
  /* 親要素の50%で伸縮、800以上にはならない */
  width: min(50%, 800px);
  background-color: #ccc;
}

.max-text{
  /* 親要素の50%で伸縮、300以下にはならない */
  width: max(50%,300px);
  background-color: #ccc;
}

.clamp-text{
  /* 親要素の50%で伸縮、150px以下にならない、800px以上にならない */
  width: clamp(150px,50%,800px);
  /*最小18px、最大36pxで画面幅に応じて伸縮  */
  font-size: clamp(18px,2.8vw,36px);
}